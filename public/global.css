@layer global {
  :is(h1, h2, .h2, h3, .h3, h4, .h4) {
    font-family: var(--font-display);
    line-height: var(--leading-fine);
    text-wrap: balance;
  }

  h1 {
    font-size: var(--step-2);
  }

  h2, .h2 {
    font-size: var(--step-4);
  }

  h3, .h3 {
    font-size: var(--step-3);
  }

  :is(h4, .h4, h5, .h5, h6, .h6) {
    font-size: var(--step-2);
  }

  small {
    font-size: var(--step--1);
  }

  ins {
    text-decoration: none;
    background: var(--color-highlight);
    color: var(--color-dark);
    padding-inline: 0.3em;
  }

  :is(code, kbd, samp) {
    font-family: var(--font-mono);
    padding: 0.2em 0.2em 0.05em 0.2em;
    hyphens: none;
    tab-size: 2;
    text-align: left;
    word-spacing: normal;
    word-break: normal;
    word-wrap: normal;
    box-decoration-break: clone;
  }

  /* This is quite a new property, so we want code styles to at least, not be huge or tiny */
  @supports not (font-size-adjust: from-font) {
    :is(code, kbd, samp) {
      font-size: 0.8em;
    }
  }

  pre:has(code) {
    width: max-content;
    max-width: 100%;
    overflow-x: auto;
  }

  pre code {
    border: none;
    background: none;
    padding: 0;
  }

  kbd {
    border: 1px solid;
    padding-block-end: 0.1em;
  }

  var {
    font-style: normal;
    font-weight: var(--font-medium);
  }

  q {
    font-style: italic;
  }

  ul:not([class]) {
    padding-inline-start: 1.7ch;
    list-style-type: disc;
  }

  ul:not([class]) > li,
  ol:not([class]) > li {
    padding-inline-start: var(--space-3xs);
  }

  ul ::marker {
    font-size: 0.8lh;
  }

  ol ::marker {
    font-size: 1em;
    font-weight: var(--font-medium);
  }

  /* Lists with classes and roles will be out of standard flow, so remove the default spacing */
  [role='list'][class],
  [role='tablist'][class] {
    margin-block: 0;
    padding: 0;
  }

  dt {
    font-weight: var(--font-medium);
  }

  dt + dd {
    margin-block-start: var(--space-xs);
  }

  dd + dt {
    margin-block-start: var(--space-s);
  }

  dd {
    margin-inline-start: 1.5ch;
  }

  blockquote {
    margin-inline: 0;
    color: var(--color-dark);
    font-size: var(--step-1);
  }

  blockquote footer {
    margin-block-start: var(--space-s);
    color: var(--color-primary);
    font-size: var(--step-0);
  }

  blockquote q {
    font-weight: var(--font-light);
  }

  figcaption {
    padding-block-start: 0.5em;
    font-size: var(--step-0);
    font-family: var(--font-mono);
  }

  table {
    border: var(--stroke);
    border-collapse: collapse;
    width: 100%;
  }

  th {
    text-align: left;
    font-weight: var(--font-bold);
    line-height: var(--leading-fine);
  }

  thead th {
    padding-block: var(--space-s);
  }

  td,
  th {
    padding: var(--space-xs) var(--space-s);
  }

  th:not(:only-of-type) {
    border-block-end: var(--stroke);
  }

  th:only-of-type {
    border-inline-end: var(--stroke);
  }

  :is(th, td) ~ :is(th, td) {
    border-inline-start: var(--stroke);
  }

  tr + tr :is(th, td) {
    border-block-start: var(--stroke);
  }

  caption {
    caption-side: bottom;
    margin-block-start: var(--space-s);
  }

  a:not([class]):hover {
    text-underline-offset: 0.2lh;
  }

  :is(h1, h2, h3, h4) a:not([class]) {
    text-decoration-thickness: 0.1ex;
    text-underline-offset: 0.2ex;
  }

  :is(h1, h2, h3, h4) a:not([class]):hover {
    text-underline-offset: 0.3ex;
  }

  :focus {
    outline: none;
  }

  :focus-visible {
    outline: 2px solid var(--color-focus, currentColor);
    outline-offset: var(--focus-offset, 0.2lh);
  }

  /* Firefox is the only browser that doesn't outline the whole element unless you make it display: inline-block. That in itself causes multiple flow issues so we can detect it, using its own vendor prefix and reduce focus offset
  */
  @supports (-moz-appearance: none) {
    :root {
      --focus-offset: 0.08em;
    }
  }

  :is(input, select, textarea) {
    accent-color: var(--color-primary);
  }

  :is(input:not([type='checkbox'], [type='radio'], [type='color']), select, textarea) {
    padding: 0.5em 0.8em;
    border-radius: var(--radius-s);
    border: var(--stroke);
    width: 100%;

    &::placeholder {
      color: var(--color-mid);
      opacity: 1;
    }
  }

  label {
    line-height: var(--leading-fine);
    font-weight: var(--font-medium);
  }

  /* Slightly adjusts the vertical position of the check/radio */
  label:has(input) input {
    transform: translateY(-0.1ex);
  }

  input:disabled {
    background: var(--color-mid);
  }

  input:disabled,
  label input:disabled + * {
    cursor: not-allowed;
  }
}
